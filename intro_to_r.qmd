---
title: "intro_to_r"
format: html
editor: visual
---

## Finding the version of R

### Author: Anjani Sowmya Bollapragada
### SID: 23851219

```{r}
R.version
```

## Installing packages 

Install the "DMwR2" package in the terminal and then use the library function

```{r}
library(DMwR2)
```

Example of loading dataset using DMwR2

```{r}
data(algae) # load algae dataset
algae  
```
Find the number of rows with NAs

```{r}
manyNAs(algae) # find rows with too many NAs
```
library() without arguments - It will provide the list of packages installed in different libraries on the computer

```{r}
library()
```

Packages loaded in the current session
```{r}
(.packages())
```
Check old packages

```{r}
old.packages()
```
Update installed packages

```{r}
update.packages()
```

## R Objects and Variables

Variables are references to some storage locations in computer memory that holds some content (objects).

Initialize a variable and check the answer.

```{r}
vat <- 0.2
vat
```
Use () to return the values directly

```{r}
(vat <- 0.2)
```
More Examples...

```{r}
x <- 5
y <- vat * x
y
```

```{r}
z <-(y/2)^2
z
```
List all the variables used above.

```{r}
ls()
```
R usually stores all variables and lists them using ls() unless we remove any variable or close the environment without saving it. rm() is used to remove variables in R.

```{r}
rm(vat)
```

## R Functions

Functions are a special type of R object designed to carry out some operation. Functions expects some input arguments and outputs results of it operation.

Examples of pre-loaded functions and libraries.

```{r}
max(4, 5, 6, 12, -4)
```
```{r}
mean(4, 5, 6, 12, -4)
```
```{r}
max(sample(1:100, 30))
```
```{r}
mean(sample(1:100, 30))
```

Seed determines the starting point used in generating a sequence of pseudo random numbers.

```{r}
set.seed(1)
```

Printing one random number from normal distribution.

```{r}
rnorm(1)
```
```{r}
set.seed(2)
rnorm(1)
```

Create a new function se (Standard error of means), first we need to check if it is in current environment

```{r}
exists("se")
```

Since there is no function created earlier, create one function now that computes the standard error of a sample.

```{r}
se <- function(x){
  variance <- var(x)
  n <-length(x)
  return (sqrt(variance/n))
}
```

```{r}
exists("se")
```

Create another function with multiple arguments.
convMeters will convert meters to inches, feet, yards, and miles.

```{r}
convMeters <- function (x, to="inch"){
  factor = switch(to, inch=39.3701, foot=3.28084, yard=1.09361, mile=0.000621371, NA)
  if(is.na(factor)) stop ("unknown target unit")
  else return (x*factor)
}
convMeters(23, "foot")
```
If no argument to is provided, the default value 'inch' is used

```{r}
convMeters(40)
```
Arguments for the function can be supplied in the order as in the function signature.

```{r}
convMeters(56.2, "yard")
```
Arguments can also be supplied in other orders if sufficient arguments are named so R can un-ambiguously assign the arguments for a function.

```{r}
convMeters(to="yard", 56.2)
```

## Factors

Factors are variables in R which take on a limited number of different values. A factor can be seen as a categorical (i.e., nominal) variable factor levels are the set of unique values the nominal variable could have. 

Factors are different from characters. 
Factors are represented internally as numeric vectors.
This factor has two levels, f and m.

```{r}
g <-c('f', 'm', 'f', 'f', 'f', 'm', 'm', 'f')
g <- factor(g)

```

More compact way to creating a factor with known levels, f and m.

```{r}
other.g <-factor(c('m', 'm', 'm', 'm'), levels= c('f', 'm'))
other.g
```
Compare the above with the following.

```{r}
other.g <-factor(c('m', 'm', 'm', 'm'))
other.g
```

Illustrate the concept of marginal frequencies or marginal distributions and table() function.

```{r}
g <- factor(c('f', 'm', 'f', 'f', 'f', 'm', 'm', 'f'))
table(g)
```
Add an age factor to the table.

```{r}
a <- factor(c('adult', 'juvenile','adult', 'juvenile','adult', 'juvenile','juvenile', 'juvenile'))
table(a, g)
```

R assumes the values at the same index in the two factors are associated with the same entity. In our dataset, we have 3 female adult, 2 female juvenile, and 3 male juvenile.


Bring the good a back and create a new table with factor g.

```{r}
a <- factor(c('adult', 'juvenile','adult', 'juvenile','adult', 'juvenile','juvenile', 'juvenile'))
t <- table(a, g)
t
```
Find marginal frequencies for a factor.

```{r}
margin.table(t, 1)#1 refers to the first factor, a (age)
```

Find relative frequencies (proportions) with respect to each margin and the overall.

```{r}
t
```

Use the margin generated for the 1st factor a 

```{r}
prop.table(t, 1)
```

```{r}
prop.table(t)
```
Same results in percentage

```{r}
prop.table(t) * 100
```

## R Data Structures

#### Vectors

The most basic data object is a vector. One single number is a vector with a single element. All elements in one vector must be of one base data type.

```{r}
v <- c(2, 5, 3, 4)
length(v)
```
```{r}
mode(v)
```

```{r}
v <- c(2, 5, 3, 4, 'me')
mode(v)
v
```
All the values have now become strings when a string is added in a vector of numeric values.

Vectors can have NA values as well.

```{r}
v <- c(2, 5, 3, 4, NA)
mode(v)
v
```

Boolean Vector

```{r}
b <- c(TRUE, FALSE, NA, TRUE)
mode(b)
b
```

Indexing of elements in vector

```{r}
b[3]
```

Updating specific element in vector

```{r}
b[3] <- TRUE
b
```

Vectors are elastic, can add values to any index position. 

```{r}
b[10] <- FALSE
b
```
Empty elements are filled with NA

Create an empty vector and implement functions.

```{r}
e <-vector()
mode(e)
```

```{r}
e <- c()
mode(e)
```

```{r}
length(e)
```

Use vector elements to construct another vector.

```{r}
b2 <-c(b[1], b[3], b[5])
b2
```

```{r}
sqrt(v)
```

#### Vector Arithmetic

Addition
```{r}
v1 <- c(3, 6, 9)
v2 <- c(1, 4, 8)
v1+v2 #addition
```
Dot Product
```{r}
v1*v2 #dot product
```
Subtraction
```{r}
v1-v2 #subtraction
```
Division
```{r}
v1/v2 #divsion
```
#### Vector Summary

Vector to illustrate “for” loop

```{r}
mysum <- function (x){
  sum <- 0
  for(i in 1:length(x)){
    sum <- sum + x[i]
  }
  return (sum)
}

(mysum (c(1, 2, 3)))
```

#### Easy ways to generate vectors

```{r}
(x <-1:10)
```
```{r}
(x <-10:1)
```
The precedence of the operator : is higher than arithmetic operators.
```{r}
10:15-1
```
```{r}
10:(15-1)
```
Use seq() to generate sequence with real numbers.

```{r}
(seq(from=1, to=5, length=4)) # 4 values between 1 and 5 inclusive, even intervals/steps
```
```{r}
(seq(length=10, from=-2, by=0.5)) #10 values, starting from 2, interval/step = 0.5
```

Use rep(x, n): repeat x n times

```{r}
(rep(5, 10))
```
```{r}
(rep("hi", 3))
```
```{r}
(rep(1:2, 3))
```
```{r}
(rep(TRUE:FALSE, 3))
```
```{r}
(rep(1:2, each=3))
```

gl() is for generating factor levels

```{r}
gl(3, 5) #three levels, each repeat 5 times
```
```{r}
gl(2, 5, labels= c('female', 'male'))#two levels, each level repeat 5 times
```
```{r}
#first argument 2 says two levels. 
#second argument 1 says repeat once
#third argment 20 says generate 20 values
gl(2, 1, 20, labels=c('female', 'male'))#10 alternating female and male pairs, a total of 20 values.
```
```{r}
n <- rep(1:2, each=3)
(n <- factor(n, 
             levels = c(1, 2),
             labels = c('female','male')
             ))
```
```{r}
n
```

Generate 10 values following a normal distribution with mean = 10 and standard deviation = 3

```{r}
(rnorm(10, mean=10, sd=3))
```
```{r}
(rt(10, df=5)) #10 values following a Student T distribution with degree of freedom of 5
```

#### Summary of Vector Generation

range, seq, rep, gl, and distribution based random data

```{r}
sample <- rnorm(100, mean=20, sd=4)
se(sample)
```

#### Sub-setting

Boolean Operations
```{r}
x <- c(0, -3, 4, -1, 45, 90, -5)
#select all elements that is greater than 0
(gtzero <- x[x>0])
```
```{r}
x <- c(0, -3, 4, -1, 45, 90, -5)
(x[x<=-2 | x>5])        
```
```{r}
(x[x>40 & x<100])
```
Use vector index
```{r}
x <- c(0, -3, 4, -1, 45, 90, -5)
(x[c(4, 6)])#select the 4th and 6th elements in the vector
```
```{r}
(x[1:3]) #select the 1st to the 3rd elements in the vector
```
Use negative index to exclude elements
```{r}
x <- c(0, -3, 4, -1, 45, 90, -5)
(x[-1]) #select all but the first element
```
```{r}
(x[-c(4, 6)])
```
```{r}
(x[-(1:3)])
```

#### Named elements

Elements in a vector can have names. Assign names to vector elements.

```{r}
x <- c(0, -3, 4, -1, 45, 90, -5)
names(x) <- c('s1', 's2', 's3', 's4', 's5', 's6', 's7')
x
```

Create a vector with named elements.
```{r}
(pH <- c(area1=4.5, area2=5.7, area3=9.8, mud=7.2))
```
Use individual names to reference/select elements
```{r}
pH['mud']
```
```{r}
pH[c('area1', 'mud')]
```
## More R Data Structures

#### Matrices and Arrays

Creating matrix

```{r}
m <- c(45, 23, 66, 77, 33, 44, 56, 12, 78, 23)
is.vector(m)
```

```{r}
is.matrix(m)
```

```{r}
is.array(m)
```

Organising the vectoir as matrix

```{r}
#then 'organize' the vector as a matrix
dim(m) <-c(2, 5)#make the vector a 2 by 5 matrix, 2x5 must = lenght of the vector
m
```

```{r}
is.vector(m)
```

```{r}
is.array(m)
```

```{r}
(m <- matrix(c(45, 23, 66, 77, 33, 44, 56, 12, 78, 23), 2, 5, byrow = TRUE))
```

Create a matrix with two columns

```{r}
test <-matrix(c(11, 11, 12, 13, 14, 9, 8, 5, 5, 6, 7, 8, 4, 3), 7, 2)
test
```

Access matrix elements using position indexes (again, index starting from 1)

```{r}
m <- c(45, 23, 66, 77, 33, 44, 56, 12, 78, 23)
#then 'organize' the vector as a matrix
dim(m) <- c(2, 5)#make the vector a 2 by 5 matrix, 2x5 must = lenght of the vector
m
```
```{r}
m[2, 3]#the element at row 2 and column 3
```

Sub-setting a matrix is similar to sub-setting on a vector.

```{r}
(s<- m[2, 1]) # select one value
```

```{r}
(m<- m [c(1,2), -c(3, 5)]) #select 1st row and 1st, 2nd, and 4th columns: result is a vector
```
```{r}
(m [1, ]) #select complete row or column: 1st row, result is a vector
```

```{r}
(v<-m [, 1]) # 1st column, result is a vector
```

```{r}
is.matrix(m)
```

```{r}
is.matrix(m)
```

```{r}
is.vector(s)
```

```{r}
is.vector(v)
```

```{r}
is.matrix(v)
```

Use drop = FALSE to keep the results as a matrix

```{r}
m <- matrix(c(45, 23, 66, 77, 33, 44, 56, 12, 78, 23), 2, 5)
(m<-m [, 2, drop = FALSE])
```
```{r}
is.matrix(m)
```

```{r}
is.vector(m)
```
cbind() and rbind(): join together two or more vectors or matrices, by column, or by row, respectively

```{r}
cbind (c(1,2,3), c(4, 5, 6))
```
```{r}
rbind (c(1,2,3), c(4, 5, 6))
```
```{r}
m <- matrix(c(45, 23, 66, 77, 33, 44, 56, 12, 78, 23), 2, 5)
(a <- rbind (c(1,2,3,4,5), m))
```
```{r}
is.array(a)
```
```{r}
is.matrix(a)
```
#### Arrays

Arrays are similar to matrices, but arrays can have more than 2 dimensions

3-D array

```{r}
a <- array(1:48, dim= c(4, 3, 2))
a
```
Select array elements using indexes, results may be a value, a vector, a matrix or an array, depending on the use of drop=FALSE

```{r}
a [1, 3, 2]
```

```{r}
a [1, , 2]
```
```{r}
a [1, , 2, drop=FALSE]
```
```{r}
a [4, 3, ]
```

```{r}
a [c(2, 3), , -2]
```

Assign names to dimensions of an array. [[]] selects one dimension.

```{r}
dimnames(a)[[1]] <-c("1qrt", "2qrt", "3qrt", "4qrt")
dimnames(a)[[2]] <-c("store1", "store2", "store3")
dimnames(a)[[3]] <-c("2017", "2018")
a
```
Alternatively, use list() to specify names

```{r}
ar <- array(data     = 1:27,
            dim      = c(3, 3, 3),
            dimnames = list(c("a", "b", "c"),                                                                    c("d", "e", "f"),                                                                       c("g", "h", "i")))
ar
```

Split array into matrices.

```{r}
matrix1 <- ar[,,g]
```
```{r}
matrix1 <- ar[,,'g']
matrix1
```
```{r}
matrix2 <- ar[,,'h']
matrix2
```
```{r}
sum <-matrix1 + matrix2
sum
```
```{r}
matrix1*3
```
```{r}
matrix1*c(2, 3)
```
```{r}
matrix1*c(2,3,2,3,2,3,2,3,2)
```
```{r}
matrix1*c(1, 2, 3)
```
```{r}
matrix1/c(1, 2, 3)
```
```{r}
matrix1/c(1, 2, 3, 1, 2, 3, 1, 2, 3)
```

## Lists

Lists are vectors too, but they are ‘recursive’. They can hold other lists, meaning a list can hold data of different types.
Lists consist of an ordered collection of objects known as their components 
list components do not need to be of the same type. They are always numbered (with an index) and may also have a name attached to them.

```{r}
mylist <- list(stud.id=34453,
               stud.name="John",
               stud.marks= c(13, 3, 12, 15, 19)
               )

mylist$stud.id
```
```{r}
mylist[1]
```

```{r}
mylist["stud.id"]
```
Subset with [
Both indices and names can be used to extract the subset.
```{r}
handle <- "stud.id"
mylist[handle]
```
Extract one item with [[
The double square brackets are used to extract one element from potentially many.
```{r}
mylist[["stud.id"]]
```
Interact with $
$ is a special case of [[ in which you access a single item by actual name.

```{r}
mylist <- list(stud.id=34453,
               stud.name="John",
               stud.marks= c(13, 3, 12, 15, 19)
               )
mylist$stud.marks
```
```{r}
mylist$stud.marks[2]
```
```{r}
names(mylist)
```
```{r}
names(mylist) <- c('id','name','marks')

names(mylist)
```
```{r}
mylist
```
Add new component

```{r}
mylist$parents.names <- c('Ana', "Mike")
mylist
```
Use c() to concatenate two lists

```{r}
newlist <- list(age=19, sex="male");
expandedlist <-c(mylist, newlist)
expandedlist
```

```{r}
length(expandedlist)
```

Remove list components using negative index, or using NULL.

```{r}
expandedlist <- expandedlist[-5]
expandedlist <- expandedlist[c(-1,-5)]
expandedlist$parents.names <- NULL
expandedlist[['marks']] <- NULL
```

```{r}
mylist
```
```{r}
unlist(mylist)
```
```{r}
mode(mylist)
```
```{r}
mode(unlist(mylist))
```
```{r}
is.vector(unlist(mylist)) #atomic list with names
```
```{r}
is.list(mylist)
```
```{r}
is.atomic(mylist)
```
```{r}
is.list(unlist(mylist))
```
## Data Frames

Data frames are a special kind of list: each row is an observation, each column is an attribute.

The column names should be non-empty, and the row names should be unique.

The data stored in a data frame can be of numeric, factor or character type., and each column should contain same number of data items.

```{r}
my.dataframe <- data.frame(site=c('A', 'B', 'A','A', 'B'),
                           season=c('winter', 'summer', 'summer', 'spring', 'fall'),                               ph = c(7.4, 6.3, 8.6, 7.2, 8.9))
my.dataframe
```
 Indexes and Names

```{r}
my.dataframe <- data.frame(site=c('A', 'B', 'A','A', 'B'),
                           season=c('winter', 'summer', 'summer', 'spring', 'fall'),                               ph = c(7.4, 6.3, 8.6, 7.2, 8.9))
my.dataframe[3, 2]
```
```{r}
my.dataframe[['site']]
```
```{r}
my.dataframe['site']
```
```{r}
my.dataframe[my.dataframe$ph>7, ]
```
```{r}
my.dataframe[my.dataframe$ph>7, 'site']
```
Use subset() to query a data frame.

subset() can only query, it can not be used to change values in the data frame.

```{r}
subset(my.dataframe, ph>7)
```

```{r}
subset(my.dataframe[1:2,], ph>7, c(site, ph))
```
```{r}
my.dataframe[my.dataframe$season=='summer', 'ph'] <- my.dataframe[my.dataframe$season=='summer', 'ph'] + 1 
                                                                  my.dataframe[my.dataframe$season=='summer', 'ph']
```
Adding a new column to data frame.

```{r}
my.dataframe$NO3 <- c(234.5, 123.4, 456.7, 567.8, 789.0)
my.dataframe
```

Removing a column.
```{r}
#my.dataframe$NO3<-NULL
my.dataframe <- my.dataframe[, -4]
my.dataframe
```

Checking the structure of a data frame.

```{r}
str(my.dataframe)
```
```{r}
nrow(my.dataframe)
```
```{r}
ncol(my.dataframe)
```
```{r}
dim(my.dataframe)
```
## Tibbles

Tibbles are similar to data frame, but they are more convenient than data frame.

Columns can be defined based on other columns defined earlier. Tibbles cannot convert categorical valued attributes to factors and does not print an entire dataset.

```{r}
install.packages("tibble")
                                                                  library(tibble)
```
Create a Tibble

```{r}
my.tibble <- tibble(TempCels = sample(-10:40, size=100, replace=TRUE), 
                    TempFahr = TempCels*9/5+32,
                    Location = rep(letters[1:2], each=50))
my.tibble
```

Use the penguins data frame from the palmerpenguins package.

```{r}
install.packages("palmerpenguins")
library(palmerpenguins)
data(penguins)
dim(penguins)
class(penguins)
penguins
```
Convert a data frame to a tibble.

```{r}
pe <-as_tibble(penguins)
class(pe)
```
```{r}
pe
```
We can use print(pe, n=Inf, width=Inf) to print the entire pe dataset.

mode is a mutually exclusive classification of objects according to their basic structure. The ‘atomic’ modes are numeric, complex, character and logical. Recursive objects have modes such as ‘list’ or ‘function’ or a few others. An object has one and only one mode.

class is a property assigned to an object that determines how generic functions operate with it. It is not a mutually exclusive classification. If an object has no specific class assigned to it, such as a simple numeric vector, it’s class is usually the same as its mode, by convention.

Changing the mode of an object is often called ‘coercion’. The mode of an object can change without necessarily changing the class.

```{r}
x <- 1:16
mode(x)
```
```{r}
dim(x) <- c(4,4)
class(x) 
```
```{r}
is.numeric(x)
```
```{r}
mode(x) <- "character"
mode(x)
```
```{r}
class(x)
```
```{r}
x <- factor(x)
class(x)
```
```{r}
mode(x)
```
class changed from 'matrix' to 'factor', but mode stays 'numeric'  
At this stage, even though x has mode numeric again, its new class, 'factor', prohibits it being used in arithmetic operations.

```{r}
is.array(x)
is.list(x)
is.data.frame(x)
is.matrix(x)
is_tibble(x)
is.vector(x)
typeof(x)
```
Subsetting a tibble results in a smaller tibble.

```{r}
class(pe[1:15, c("bill_length_mm", "bill_depth_mm")])
```
```{r}
class(penguins[1:15, c("bill_length_mm", "bill_depth_mm")])
```
```{r}
class(pe[1:15, c("bill_length_mm")])
```
```{r}
class(penguins[1:15, c("bill_length_mm")])
```
## dplyr

dplyr library is very useful for manipulate table-like data.

#### filter() vs. select()

select() selects a subset of columns of the dataset.

filter() select a subset of rows.

```{r}
install.packages("dplyr")
library(dplyr)
```
```{r}
select(filter(pe, species=="Adelie"), bill_length_mm, bill_depth_mm)
```
```{r}
filter(select(pe, bill_length_mm, bill_depth_mm, species), species=="Adelie")
```
```{r}
pe
```
```{r}
pe[pe$species=='Adelie', c("bill_length_mm", "bill_depth_mm")]
```
```{r}
subset(pe, pe$species=='Adelie', c("bill_length_mm", "bill_depth_mm"))
```
Pipe |>, or the magrittr %>%, passes the output of a function to another function as its first argument

```{r}
select(pe, bill_length_mm, bill_depth_mm, species) |> filter(species=="Adelie")
```
Passing the result from the filter to the select function and achieve the same result as shown above.

```{r}
filter(pe, species=="Adelie") |> select(bill_length_mm, bill_depth_mm, species)
```
Create a data object to hold student names (Judy, Max, Dan) and their grades (`78,85,99) Convert number grades to letter grades:90-100:A;80-89:B;70-79:C; \<70:F.

```{r}
students <- list(names=c("Judy", "Max", "Dan"),
                 grades=c(78, 85, 99))
print ("before:")
```
```{r}
students
```

```{r}
gradeConvertor<- function (grade){
  grade = as.numeric(grade)
  if(grade > 100 | grade < 0) print ("grade out of the range")
  else if(grade >= 90 & grade <= 100) return ("A")
  else if(grade >= 80 & grade < 90) return ("B")
  else if(grade >= 70 & grade < 80) return ("C")
  else return ("F")
}

#students$grades <-sapply(students$grades, gradeConvertor)

for(i in 1:length(students$grades)){
  students$grades[i] = gradeConvertor(students$grades[i])
}

print ("after:")
```
```{r}
students
```
This is the end of Intro to R.
